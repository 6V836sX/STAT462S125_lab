Sys.setenv(LANG = "en")
knitr::opts_chunk$set(eval=FALSE)
result <- (1+2+3)/3
paste0("result = ",result)
set.seed(1)
x <- rnorm(10)
y <- rnorm(10)
print(x)
print(y)
pedestrian_mean_x <- sum(x)/length(x)
pedestrian_mean_x
all.equal(pedestrian_mean_x, mean(x))
n <- length(x)
pedestrian_variance_x <- sum((x-mean(x))^2)/(n-1)  #这里第一个x是向量，对向量x进行操作得到向量[x-mean(x)]
pedestrian_variance_x
all.equal(pedestrian_variance_x, var(x))
pedestrian_sd_x <- sqrt(var(x))
pedestrian_sd_x
all.equal(pedestrian_sd_x, sd(x))
pedestrian_mean_y <- sum(y)/length(y)
pedestrian_covariance <- sum((y-pedestrian_mean_y)*(x-mean(x)))/(n-1)
pedestrian_covariance
all.equal(pedestrian_covariance,cov(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x),sd(y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
x
y
# all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
x
y
corr(x,y)
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
x
y
cor(x,y)
# all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
cor(x,y)
# all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
cor(x,y)
all.equal(pedestrian_correlation,corr(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
cor(x,y)
all.equal(pedestrian_correlation,cor(x,y))
pedestrian_correlation <- cov(x,y)/(sd(x)*sd(y))
cor(x,y)
pedestrian_correlation
all.equal(pedestrian_correlation,cor(x,y))
set.seed(1)
population_data <- rnorm(n = 10000, mean = 100, sd = sqrt(100))
true_mean <- mean(population_data)
true_sd <- sd(population_data)
sample_size <- 10
sample_data <- sample(population_data, size = sample_size)
simulations <- 100
alpha <- 0.05
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
t_critical <- qt(p=(1-alpha/2),df=(n-1) )
moe <- sample_mean-t_critical*sample_sd/sqrt(n)
lower_limit <- sample_mean - moe
upper_limit <- sample_mean + moe
moe <- sample_mean-t_critical*sample_sd/sqrt(n)
lower_limit <- sample_mean - moe
upper_limit <- sample_mean + moe
moe <- sample_mean-t_critical*sample_sd/sqrt(n)
lower_limit <- sample_mean - moe
upper_limit <- sample_mean + moe
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
upper_limit >= true_mean & true_mean >= lower_limit
true_mean
upper_limit >= true_mean & true_mean >= lower_limit
true_mean
true_sd
upper_limit >= true_mean & true_mean >= lower_limit
# this function runs an experiment, generates the confidence interval, and checks whether the confidence interval actually includes the true parameter.
# this is returned as a TRUE/FALSE value.
check_coverage_t <- function(n = 10, alpha = 0.05){
sample_data_t <- sample(population_data, size = n)
sample_mean_t <- mean(sample_data_t)
sample_sd_t <- sd(sample_data_t)
critical_value_t <- qt(p=1-alpha,df=n-1)
moe_t <- critical_value_t*sample_sd_t/sqrt(n)
lower_limit_t <- sample_mean_t - moe_t
upper_limit_t <- sample_mean_t + moe_t
return(upper_limit_t >= true_mean & true_mean >= lower_limit_t)
}
check_coverage_t(n = 10, alpha = 0.05)
check_coverage_t(n = 10, alpha = 0.05)
check_coverage_t(n = 10, alpha = 0.05)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.5)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.05)
check_coverage_t(n = 100, alpha = 0.05)
check_coverage_t(n = 100, alpha = 0.05)
check_coverage_t(n = 100, alpha = 0.05)
check_coverage_t(n = 100, alpha = 0.05)
check_coverage_t(n = 100, alpha = 0.02)
check_coverage_t(n = 100, alpha = 0.02)
check_coverage_t(n = 100, alpha = 0.02)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 100, alpha = 0.1)
check_coverage_t(n = 10, alpha = 0.05)
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
View(check_coverage_t)
View(check_coverage_t)
View(check_coverage_t)
coverage_t <- function(n = 10, alpha = 0.05, repeats = 100){
captured_counts_t <- sum(replicate(n = n, expr = check_coverage_t(n=n,alpha = alpha)))
return(captured_counts_t/repeats)
}
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
simulations
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
set.seed(1)
population_data <- rnorm(n = 10000, mean = 100, sd = sqrt(100))
true_mean <- mean(population_data)
true_sd <- sd(population_data)
sample_size <- 100
sample_data <- sample(population_data, size = sample_size)
simulations <- 100
alpha <- 0.05
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
set.seed(1)
population_data <- rnorm(n = 10000, mean = 100, sd = sqrt(100))
true_mean <- mean(population_data)
true_sd <- sd(population_data)
sample_size <- 1000
sample_data <- sample(population_data, size = sample_size)
simulations <- 100
alpha <- 0.05
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
set.seed(1)
x <- rnorm(10)
y <- rnorm(10)
print(x)
print(y)
all.equal(pedestrian_mean_x, mean(x))
n <- length(x)
pedestrian_variance_x <- sum((x-mean(x))^2)/(n-1)  #这里第一个x是向量，对向量x进行操作得到向量[x-mean(x)]
pedestrian_variance_x
all.equal(pedestrian_variance_x, var(x))
set.seed(1)
population_data <- rnorm(n = 10000, mean = 100, sd = sqrt(100))
true_mean <- mean(population_data)
true_sd <- sd(population_data)
sample_size <- 1000
sample_data <- sample(population_data, size = sample_size)
simulations <- 100
alpha <- 0.05
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
set.seed(1)
x <- rnorm(10)
y <- rnorm(10)
print(x)
print(y)
all.equal(pedestrian_mean_x, mean(x))
n <- length(x)
pedestrian_variance_x <- sum((x-mean(x))^2)/(n-1)  #这里第一个x是向量，对向量x进行操作得到向量[x-mean(x)]
pedestrian_variance_x
all.equal(pedestrian_variance_x, var(x))
coverage_t <- function(n = 10, alpha = 0.05, repeats = 100){
captured_counts_t <- sum(replicate(n = n, expr = check_coverage_t(n=n,alpha = alpha)))
return(captured_counts_t/repeats)
}
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t <- function(n = 10, alpha = 0.05, repeats = 100){
captured_counts_t <- sum(replicate(n = n, expr = check_coverage_t(n=n,alpha = alpha)))/repeats
return(captured_counts_t/repeats)
}
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/n
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/n
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/n
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/n
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
sum(replicate(n = 100, expr = check_coverage_t(n = 10, alpha = 0.05)))/100
coverage_t <- function(n = 10, alpha = 0.05, repeats = 100){
captured_counts_t <- sum(replicate(n = n, expr = check_coverage_t(n=n,alpha = alpha)))/repeats
return(captured_counts_t/repeats)
}
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
coverage_t(n = sample_size, alpha = alpha, repeats = simulations)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
t_critical <- qt(p=1-alpha/2,df=(n-1) )
moe <- sample_mean-t_critical*sample_sd/sqrt(n)
lower_limit <- sample_mean - moe
upper_limit <- sample_mean + moe
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
sprintf("The %.0f%% confidence interval from this sample is from %.3f to %.3f(3dp).",
(1-alpha)*100,
lower_limit,
upper_limit)
#(3dp)--数值是精确到小数点后三位的
true_mean
true_sd
upper_limit >= true_mean & true_mean >= lower_limit
true_mean
true_sd
upper_limit >= true_mean & true_mean >= lower_limit
# this function runs an experiment, generates the confidence interval, and checks whether the confidence interval actually includes the true parameter.
# this is returned as a TRUE/FALSE value.
check_coverage_t <- function(n = 10, alpha = 0.05){
sample_data_t <- sample(population_data, size = n)
sample_mean_t <- mean(sample_data_t)
sample_sd_t <- sd(sample_data_t)
critical_value_t <- qt(p=1-alpha,df=n-1)
moe_t <- critical_value_t*sample_sd_t/sqrt(n)
lower_limit_t <- sample_mean_t - moe_t
upper_limit_t <- sample_mean_t + moe_t
return(upper_limit_t >= true_mean & true_mean >= lower_limit_t)
}
check_coverage_t(n = 10, alpha = 0.05)
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
# this function runs an experiment, generates the confidence interval, and checks whether the confidence interval actually includes the true parameter.
# this is returned as a TRUE/FALSE value.
check_coverage_t <- function(n = 10, alpha = 0.05){
sample_data_t <- sample(population_data, size = n)
sample_mean_t <- mean(sample_data_t)
sample_sd_t <- sd(sample_data_t)
critical_value_t <- qt(p=1-alpha,df=n-1)
moe_t <- critical_value_t*sample_sd_t/sqrt(n)
lower_limit_t <- sample_mean_t - moe_t
upper_limit_t <- sample_mean_t + moe_t
return(upper_limit_t >= true_mean & true_mean >= lower_limit_t)
}
check_coverage_t(n = 10, alpha = 0.05)
check_coverage_t(n = 10, alpha = 0.05)
check_coverage_t(n = 10, alpha = 0.05)
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
set.seed(1)
x <- rnorm(10)
y <- rnorm(10)
print(x)
print(y)
all.equal(pedestrian_mean_x, mean(x))
n <- length(x)
pedestrian_variance_x <- sum((x-mean(x))^2)/(n-1)  #这里第一个x是向量，对向量x进行操作得到向量[x-mean(x)]
pedestrian_variance_x
all.equal(pedestrian_variance_x, var(x))
set.seed(1)
population_data <- rnorm(n = 10000, mean = 100, sd = sqrt(100))
true_mean <- mean(population_data)
true_sd <- sd(population_data)
sample_size <- 10
sample_data <- sample(population_data, size = sample_size)
simulations <- 100
alpha <- 0.05
# check a random number generated between 0 and 1 is greater than 0.5 or not
runif(1, 0, 1) > 0.5
# repeat the same process 10 times
replicate(n = 10, expr = runif(1, 0, 1) > 0.5)
# find out the chance that the random number is greater than 0.5 from 10 iterations
sum(replicate(n = 10, expr = runif(1, 0, 1) > 0.5))/10
